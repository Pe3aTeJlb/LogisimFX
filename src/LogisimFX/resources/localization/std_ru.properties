#
# std/Builtin.java
#
builtinLibrary= Встроенный
# instance/StdAttr.java
stdFacingAttr= Направление
stdFPGASupportAttr=Поддержка ПЛИС
stdDataWidthAttr= Биты данных
stdTriggerAttr= Срабатывание
stdTriggerRising= Передний фронт
stdTriggerFalling= Задний фронт
stdTriggerHigh= Высокий уровень
stdTriggerLow= Низкий уровень
stdLabelAttr= Метка
stdLabelFontAttr= Шрифт метки
stdSelectLocAttr = Положение выбирающего входа
stdSelectBottomLeftOption = Снизу/слева
stdSelectTopRightOption = Сверху/справа
stdLabelCenter = Центр
stdLabelLocAttr = Местоположение метки
# instance/InstanceTextField.java
changeLabelAction= Изменить метку
#
# std/base/Base.java
#
baseLibrary= Базовые

# std/base/BitExtender.java
extenderComponent= Расширитель битов
extenderInAttr= Разрядность входа
extenderOutAttr= Разрядность выхода
extenderTypeAttr= Тип расширения
extenderOneType= Единица
extenderZeroType= Ноль
extenderSignType= Знак
extenderInputType= Вход
extenderMainLabel= extend
extenderOneLabel= 1
extenderZeroLabel= 0
extenderSignLabel= sign
extenderInputLabel= input

# std/base/Clock
clockComponent= Тактовый генератор
clockHighAttr= Продолжительность единицы
clockLowAttr= Продолжительность нуля
clockPhaseAttr = Смещение фазы
clockDurationValue= %s тактов
clockDurationOneValue= 1 такт
durationSmallMessage= Значение должно быть как минимум %s.
durationLargeMessage= Значение должно быть %s или меньше.
freqInvalidMessage= Значение не является допустимым целым

# std/base/Pin
pinComponent= Контакт
pinInputName= Вход
pinOutputName= Выход
pinThreeStateAttr= Три состояния?
pinOutputAttr= Выход?
pinPullAttr= Обращение с плавающими
pinPullNoneOption= Не менять
pinPullUpOption= Повышать
pinPullDownOption= Понижать
pinLabelLocAttr= Направление метки
pinInputToolTip= Добавить входной контакт
pinOutputToolTip= Добавить выходной контакт
pinFrozenTitle= Контакт подключен к надсхеме.
pinFrozenQuestion= Значение на контакте привязано к состоянию надсхемы. Создать новое состояние схемы?

# std/base/Probe
probeComponent= Датчик

# std/base/PullResistor
pullComponent= Согласующий резистор
pullTypeAttr= Направление согласования
pullZeroType= Ноль
pullOneType= Единица
pullErrorType= Ошибка

# std/base/Text.java
textComponent= Метка
textTextAttr= Текст
textFontAttr= Шрифт
textHorzAlignAttr= Горизонтальное выравнивание
textHorzAlignLeftOpt= Слева
textHorzAlignRightOpt= Справа
textHorzAlignCenterOpt= Центр
textVertAlignAttr= Вертикальное выравнивание
textVertAlignTopOpt= По верху
textVertAlignBaseOpt= По базовой
textVertAlignBottomOpt= По низу
textVertAlignCenterOpt= По центру

# std/base/Tunnel.java
tunnelComponent= Тоннель

#
# std/Wiring.java
#
wiringLibrary= Проводка
wiringGateAttr= Положение затвора
wiringGateBottomRightOption= Снизу/справа
wiringGateTopLeftOption= Сверху/слева

# std/wiring/Transistor.java
transistorComponent= Транзистор
transistorTypeAttr= Тип
transistorTypeP= p-тип
transistorTypeN= n-тип

# std/wiring/TransmissionGate.java
transmissionGateComponent= Передаточный вентиль

# std/wiring/Power.java
powerComponent= Питание

# std/wiring/Ground.java
groundComponent= Земля

#
# std/Gates.java
#
gatesLibrary= Элементы
gateSizeAttr= Размер элемента
gateSizeNarrowOpt= Узкий
gateSizeNormalOpt= Средний
gateSizeWideOpt= Широкий
gateNegateAttr= Инвертировать %s
gateInputsAttr= Количество входов
gateOutput01= 0/1
gateOutput0Z= 0/плавающее
gateOutputZ1= плавающее/1
gateOutputAttr= Выходное значение
xorBehaviorAttr= Многовходовое поведение
xorBehaviorOne= Когда на одном входе 1
xorBehaviorOdd= Когда на нечётном количестве 1
# std/Constant.java
constantComponent= Константа
constantValueAttr= Значение
# std/NotGate.java
notGateComponent= Элемент НЕ
# std/Buffer.java
bufferComponent= Буфер
# std/AndGate.java
andGateComponent= Элемент И
# std/NandGate.java
nandGateComponent= Элемент И-НЕ
# std/NorGate.java
norGateComponent= Элемент ИЛИ-НЕ
# std/OrGate.java
orGateComponent= Элемент ИЛИ
# std/XorGate.java
xorGateComponent= Элемент Исключающее ИЛИ
# std/XnorGate.java
xnorGateComponent= Элемент Исключающее ИЛИ-НЕ
# std/OddParityGate.java
oddParityComponent= Нечётность
# std/EvenParityGate.java
evenParityComponent= Чётность
# std/ControlledBuffer.java
controlledBufferComponent= Управляемый буфер
controlledInverterComponent= Управляемый инвертор
controlledControlOption= Расположение управляющего входа
controlledLeftHanded= По левую руку
controlledRightHanded= По правую руку
#
# std/Memory.java
#
memoryLibrary= Память
memEnableLabel= en
# AbstractFlipFlop.java
flipFlopClockTip= Тактовый вход: состояние обновляется при срабатывании
flipFlopQTip= Текущее состояние триггера
flipFlopNotQTip= Дополнение текущего состояния триггера
flipFlopResetTip= Очистка: когда 1, состояние асинхронно фиксируется на 0
flipFlopPresetTip= Установка: когда 1, состояние асинхронно фиксируется на 1
flipFlopEnableTip= Включение: когда 0, срабатывание тактового входа не даёт эффекта
# std/Counter.java
counterComponent= Счётчик
counterMaxAttr= Максимальное значение
counterGoalAttr= Действие при переполнении
counterGoalWrap= Закольцовывать
counterGoalStay= Оставаться на значении
counterGoalContinue= Продолжать счёт
counterGoalLoad= Загрузить следующее значение
counterQTip= Выход: текущее значение счётчика
counterClockTip= Тактовый вход: значение может обновиться при срабатывании
counterDataTip= Данные: значение для загрузки в счётчик
counterLoadTip= Загрузка: когда 1, загружает с входа данных (если Счёт = 0) или уменьшает
counterEnableTip= Счёт: когда 1, счётчик увеличивается (или уменьшается, если Загрузка = 1)
counterResetTip= Очистка: когда 1, асинхронно сбрасывает в 0
counterCarryTip= Перенос: 1, когда значение достигает максимума (минимума при уменьшении)
counterEnableLabel= ct
counterLabel= ctr
# std/DFlipFlop.java
dFlipFlopComponent= D триггер
# std/TFlipFlop.java
tFlipFlopComponent= T триггер
# std/JKFlipFlop.java
jkFlipFlopComponent= J-K триггер
# std/SRFlipFlop.java
srFlipFlopComponent= S-R триггер
# std/Random.java
randomSeedAttr= Семя
randomComponent= Генератор случайных чисел
randomQTip= Выход: текущее число в последовательности
randomClockTip= Тактовый вход: значение может обновиться при срабатывании
randomNextTip= Включение: переходить к следующему в последовательности при срабатывании тактового входа
randomResetTip= Очистка: когда 1, асинхронно сбрасывает на начальное семя
# std/Register.java
registerComponent= Регистр
registerQTip= Выход: текущее значение регистра
registerDTip= Данные: значение, загружаемое при срабатывании тактового входа
registerClkTip= Тактовый вход: значение обновляется при срабатывании 
registerClrTip= Очистка: когда 1, значение асинхронно фиксируется на 0
registerEnableTip= Включение: когда 0, срабатывание тактового входа не даёт эффекта
registerLabel= reg
registerWidthLabel= (%sb)
# std/RamFactory.java
ramComponent= ОЗУ
# std/RomFactory.java
romComponent= ПЗУ
romContentsAttr= Содержимое
romContentsValue= (нажмите чтобы редактировать)
romChangeAction= Редактировать содержимое ПЗУ
# std/Ram.java
ramAddrWidthAttr= Разрядность адреса
ramDataWidthAttr= Разрядность данных
ramDataLabel= D
ramAddrLabel= A
ramWELabel= str
ramCSLabel= sel
ramOELabel= ld
ramClrLabel= clr
ramGigabyteLabel= %sГБ ОЗУ
ramMegabyteLabel= %sМБ ОЗУ
ramKilobyteLabel= %sКБ ОЗУ
ramByteLabel= %sБ ОЗУ
romGigabyteLabel= %sГБ ПЗУ
romMegabyteLabel= %sМБ ПЗУ
romKilobyteLabel= %sКБ ПЗУ
romByteLabel= %sБ ПЗУ
memDataTip= Данные: значение, считываемое по адресу
memAddrTip= Адресу: место в памяти, к которому производится доступ
memCSTip= Выбор кристалла: 0 выключает компонент
ramClkTip= Тактовый вход: значение в памяти обновляется при изменении с 0 на 1 
ramOETip= Чтение: если 1, память считывается на выход
ramWETip= Запись: если 1, значение со входа записывается в память
ramClrTip= Очистка: когда 1, асинхронно сбрасывает содержимое в 0
ramBusTip= Данные: значение, считываемое или записываемое по адресу
ramInTip= Вход: значение, которое будет храниться по адресу
ramBusAttr= Интерфейс данных
ramBusSynchCombined= Один синхронный порт чтения/записи
ramBusAsynchCombined= Один асинхронный порт чтения/записи
ramBusSeparate= Раздельные порты чтения и записи
ramEditMenuItem= Редактировать содержимое...
ramClearMenuItem= Очистить содержимое
ramLoadMenuItem= Загрузить образ...
ramSaveMenuItem= Сохранить образ...
ramConfirmClearTitle= Подтверждение очистки
ramConfirmClearMsg= Вы уверены, что хотите обнулить память?
ramLoadDialogTitle= Загрузка образа ОЗУ
ramLoadErrorTitle= Ошибка загрузки
ramSaveDialogTitle= Сохранение образа ОЗУ
ramSaveErrorTitle= Ошибка сохранения
# std/memory/ShiftRegister.java
shiftRegisterComponent= Сдвиговый регистр
shiftRegisterLabel1= shift reg
shiftRegisterLabel2= %sx%s
shiftRegLengthAttr= Количество ступеней
shiftRegParallelAttr= Параллельная загрузка
shiftRegShiftTip= Сдвиг: сдвиг выключен, если 0
shiftRegClockTip= Тактовый вход: значения могут обновиться при срабатывании
shiftRegClearTip= Очистка: когда 1, асинхронно сбрасывает все в 0
shiftRegDirTip   = Выбор направления сдвига: 0 - сдвиг вправо, 1 - сдвиг влево
shiftRegInTip= Вход: значение для сдвига в первую ступень
shiftRegOutTip= Выход: содержимое последней ступени
shiftRegLoadTip= Загрузка: когда 1 (при Сдвиг = 0), все ступени загружаются со входов
shiftShiftDirectionAttr = Направление сдвига
shiftShiftLeft = Влево
shiftShiftRight = Вправо
#
# std/Plexers.java
#
plexerLibrary= Плексоры
plexerSelectBitsAttr= Выбирающие биты
plexerThreeStateAttr= Три состояния?
plexerDisabledAttr= На отключенном выходе
plexerDisabledFloating= Плавающее
plexerDisabledZero= Ноль
plexerEnableAttr= Разрешающий вход?
plexerSelectLocAttr= Положение выбирающего входа
plexerSelectTopRightOption= Сверху/справа
plexerSelectBottomLeftOption= Снизу/слева
# std/Multiplexer.java
multiplexerComponent= Мультиплексор
multiplexerSelectTip= Выбирающий вход: определяет, какой вход становится выходом
multiplexerEnableTip= Разрешить: когда не 0, на выходе - значение с выбранного входа
multiplexerInTip= Вход %s
multiplexerOutTip= Выход
# std/Demultiplexer.java
demultiplexerComponent= Демультиплексор
demultiplexerSelectTip= Выбирающий вход: определяет, на какой выход посылается значение со входа
demultiplexerEnableTip= Разрешить: когда не 0, на выбранном выходе - значение со входа
demultiplexerInTip= Вход
demultiplexerOutTip= Выход %s
# std/Decoder.java
decoderComponent= Декодер
decoderSelectTip= Выбирающий вход: определяет, на каком выходе 1
decoderEnableTip= Разрешить: когда не 0, на выбранном выходе - 1
decoderOutTip= Выход %s
# std/plexers/PriorityEncoder.java
priorityEncoderComponent= Шифратор приоритетов
priorityEncoderInTip= Вход %s
priorityEncoderOutTip= Выход: адрес старшего по номеру входа, на котором 1
priorityEncoderEnableInTip= Разрешающий вход: 0 отключает компонент
priorityEncoderEnableOutTip= Разрешающий выход: 1, если включен и ни на одном входе нет 1
priorityEncoderGroupSignalTip= Выбор группы: 1, если включен и хотя бы на одном входе 1
# std/BitSelector.java
bitSelectorComponent= Селектор битов
bitSelectorGroupAttr= Выходные биты
bitSelectorOutputTip= Выход: значение выбранной из данных группы бит
bitSelectorDataTip= Данные
bitSelectorSelectTip= Выбирающий вход: определяет, какая группа из данных выбрана
#
# arith/Arithmetic.java
#
arithmeticLibrary= Арифметика
# arith/Adder.java
adderComponent= Сумматор
adderInputTip= Вход: одно из чисел для сложения
adderOutputTip= Выход: сумма значений на входах (плюс значение переноса)
adderCarryInTip= Вход переноса: если 1, то дополнительная 1 добавляется к выходному значению
adderCarryOutTip= Выход переноса: 1, если сумма переполняет доступные биты
# arith/Subtractor.java
subtractorComponent= Вычитатель
subtractorMinuendTip= Уменьшаемое: число, из которого вычитать
subtractorSubtrahendTip= Вычитаемое: число, которое отнимается от уменьшаемого
subtractorOutputTip= Выход: разность между уменьшаемым и вычитаемым
subtractorBorrowInTip= Вход займа: если 1, то из выходного значения вычитается 1
subtractorBorrowOutTip= Выход займа: 1, если разность даёт отрицательное значение
# arith/Multiplier.java
multiplierComponent= Множитель
multiplierInputTip= Вход: одно из чисел для умножения
multiplierOutputTip= Выход: произведение входов плюс вход переноса
multiplierCarryInTip= Вход переноса: величина, прибавляемая к выходному значению
multiplierCarryOutTip= Выход переноса: старшие биты произведения
# arith/Divider.java
dividerComponent= Делитель
dividerUpperInput= upper
dividerRemainderOutput= rem
dividerDividendLowerTip= Низ делимого: младшая половина числа для деления
dividerDividendUpperTip= Верх делимого: старшая половина числа для деления
dividerDivisorTip= Делитель: число, на которое делить
dividerOutputTip= Выход: результат деления делимого на делитель
dividerRemainderTip= Остаток: остаток (делимое - частное*делитель)
# arith/Negator.java
negatorComponent= Отрицатель
negatorInputTip= Вход: число для инвертирования
negatorOutputTip= Выход: инвертированное входное значение в дополнительном коде
# arith/Comparator.java
comparatorComponent= Компаратор
comparatorType= Формат числа
unsignedOption= Беззнаковое
twosComplementOption= Дополнительный код
comparatorInputATip= A: первое число для операции сравнения
comparatorInputBTip= B: второе число для операции сравнения
comparatorLessTip= Меньше: 1, если A меньше, чем B
comparatorEqualTip= Равно: 1, если A равно B
comparatorGreaterTip= Больше: 1, если A больше, чем B
# arith/Shifter.java
shifterComponent= Сдвигатель
shifterShiftAttr= Тип сдвига
shiftLogicalLeft= Логический левый
shiftLogicalRight= Логический правый
shiftArithmeticRight= Арифметический правый
shiftRollLeft= Циклический левый
shiftRollRight= Логический правый
shifterDistanceTip= Дистанция: на сколько сдвигать входное значение
shifterInputTip= Вход: биты для сдвига
shifterOutputTip= Выход: результат сдвига входного значения
# arith/BitAdder.java
bitAdderComponent= Сумматор битов
bitAdderInputTip= Вход: биты для подсчета
bitAdderOutputManyTip= Выход: количество единиц среди входных битов
# arith/BitFinder.java
bitFinderComponent= Искатель битов
bitFinderFindLabel= find
bitFinderHighLabel= high
bitFinderLowLabel= low
bitFinderHighOption= Старший %s
bitFinderLowOption= Младший %s
bitFinderTypeAttr= Тип
bitFinderIndexHighTip= Номер: номер старшего бита %s во входном значении
bitFinderIndexLowTip= Номер: номер младшего бита %s во входном значении
bitFinderPresentTip= Присутствие: 1, если входное значение содержит %s
bitFinderInputTip= Вход: биты для поиска
#
# io
#
# io/Io.java
ioLibrary= Ввод/вывод
ioLabelCenter= Центр
ioBitWidthAttr= Разрядность
ioColorAttr= Цвет
ioLabelLocAttr= Направление метки
ioLabelColorAttr= Цвет метки
ioActiveAttr= Активен при единице?
# io/Button.java
buttonComponent= Кнопка
# io/Joystick.java
joystickComponent= Джойстик
# io/Keyboard.java
keyboardComponent= Клавиатура
keybDesc= клавиатура (буфер  %s)
keybBufferLengthAttr= Длина буфера
keybClearTip= Очистка: 1 очищает буфер
keybClockTip= Тактовый вход: срабатывание считывает первый символ буфера
keybEnableTip= Разрешение записи: 0 отключает тактовый вход
keybAvailTip= Наличие: 1, когда буфер содержит символы
keybOutputTip= Данные: ASCII значение первого символа буфера
# io/Led.java
ledComponent= Светодиод
# io/SevenSegment.java
sevenSegmentComponent= 7-сегментный индикатор
# io/HexDigit.java
hexDigitComponent= Шестнадцатеричный индикатор
# io/DotMatrix.java
dotMatrixComponent= Светодиодная матрица
ioMatrixInput= Формат входа
ioMatrixRows= Строки матрицы
ioMatrixCols= Столбцы матрицы
ioOnColor= Цвет включенных
ioOffColor= Цвет выключенных
ioBackgroundColor= Фон
ioMatrixPersistenceAttr= Продолжительность свечения
ioMatrixShape= Форма точки
ioInputColumn= Столбцы
ioInputRow= Строки
ioInputSelect= Выбор Строки/Столбцы
ioShapeCircle= Круглая
ioShapeSquare= Квадратная
ioShapePaddedSquare = Отдельные квадраты
ioLedBarComponent = LED панель
ioLedBarSegments = Кол-во сегментов
ioLedBarInput = Интерфейс подключения
ioLedBarInputSeparated = Индивидуальное подключение
ioLedBarInputOneWire = Общая шина
# io/Tty.java
ttyComponent= Терминал
ttyDesc= Терминал (%s строк, %s столбцов)
ttyDescShort= Терминал
ttyRowsAttr= Строки
ttyColsAttr= Столбцы
ttyClearTip= Очистка: 1 очищает экран
ttyClockTip= Тактовый вход: срабатывание добавляет символ на вход
ttyEnableTip= Разрешение записи: 0 отключает тактовый вход
ttyInputTip= Данные: ASCII значение следующего символа для записи
#
# io/DipSwitch.java
#
DIP = ДИП
DipSwitchComponent = Двухпозиционный переключатель
nrOfSwitch = Количество переключателей
#
# io/PortIO.java
#
pioDirection = Направление порта
pioInput = Вход
pioInputs = Входы
pioIOMultiple = Оба направления
pioIOSingle = Оба направления (один контакт управления выходами)
pioNumber = Количество контактов
pioOutEnable = Выход включён
pioOutEnables = Управление выходами
pioOutput = Выход
pioOutputs = Выходы

verifierLibrary = Верификаторы
verifier = Верификатор

stdAccessModeAttr = Режим доступа
stdEditingMode = Режим редактирования
stdProtectionMode = Режим защиты

stdSequenceWidthAttr = Разрядность последовательности

verifierInputTip = Вход верификатора
verifierOutput0Tip = Выход последовательности
verifierOutput1Tip = Ready output: верификатор закончил работу
counterUpDownTip=counterUpDownTip = Вверх вниз: когда 1, увеличение счетчика, когда 0, уменьшение счетчика
buttonPressAttr=Логическая 1
buttonPressActive=1 при нажатии
buttonPressPassive=1 в покое

pioComponent = Порт I/O